Tokenizing identifier: DOMINIC
[1;31mCould not tokenize: [0m$ [1;31mon line 1[0m
Tokenizing identifier: Farolino
Tokenizing reserved word: .
Tokenizing reserved word: .
Tokenizing reserved word: .
[1;31mCould not tokenize: [0m$ [1;31mon line 2[0m
Tokenizing TInteger: 255
Tokenizing reserved word: /
[1;31mCould not tokenize: [0m\\ [1;31mon line 2[0m
Tokenizing identifier: Testertotts
[1;31mCould not tokenize: [0m$ [1;31mon line 2[0m
Tokenizing TInteger: 4
Tokenizing identifier: Dom_inic_far_ol_4ino
[1;31mCould not tokenize: [0m% [1;31mon line 2[0m
Tokenizing TInteger: 1000000
Tokenizing TFloat: 59249.392
Tokenizing reserved word: .
Tokenizing reserved word: program
Tokenizing reserved word: is
Tokenizing reserved word: ;
Tokenizing reserved word: begin
Tokenizing reserved word: end
Tokenizing reserved word: global
Tokenizing reserved word: procedure
Tokenizing reserved word: (
Tokenizing reserved word: )
Tokenizing reserved word: in
Tokenizing reserved word: out
Tokenizing reserved word: inout
Tokenizing reserved word: integer
Tokenizing reserved word: float
Tokenizing reserved word: string
Tokenizing reserved word: bool
Tokenizing reserved word: char
Tokenizing reserved word: [
Tokenizing reserved word: ]
Tokenizing reserved word: if
Tokenizing reserved word: then
Tokenizing reserved word: else
Tokenizing reserved word: for
Tokenizing reserved word: return
Tokenizing reserved word: &
Tokenizing reserved word: |
Tokenizing reserved word: not
Tokenizing reserved word: +
Tokenizing reserved word: -
Tokenizing reserved word: <
Tokenizing reserved word: >=
Tokenizing reserved word: <=
Tokenizing reserved word: >
Tokenizing reserved word: ==
Tokenizing reserved word: !=
Tokenizing reserved word: *
Tokenizing reserved word: /
[1;31mCould not tokenize: [0m=/ [1;31mon line 46[0m
Tokenizing reserved word: true
Tokenizing reserved word: false
Tokenizing reserved word: integer
Tokenizing identifier: THIS_IS_A_NEW_IDENTIF13R
Tokenizing reserved word: :=
Tokenizing TInteger: 44
Tokenizing reserved word: ;
Tokenizing reserved word: string
Tokenizing identifier: test
Tokenizing reserved word: :=
Tokenizing string: "dominic"
Tokenizing reserved word: char
Tokenizing identifier: test
Tokenizing reserved word: :=
Tokenizing char: 'a'
Tokenizing reserved word: ;
Tokenizing char: [1;31mCould not tokenize: [0m'do [1;31mon line 52[0m
Tokenizing identifier: ominic
Tokenizing char: [1;31mCould not tokenize: [0m'
 [1;31mon line 52[0m
Tokenizing string: [1;31mCould not tokenize: [0m"domfeomfa\ [1;31mon line 53[0m
[1;31mCould not tokenize: [0m\ [1;31mon line 53[0m
Tokenizing identifier: this
Tokenizing reserved word: is
Tokenizing identifier: a
Tokenizing identifier: test
Tokenizing char: [1;31mCould not tokenize: [0m'c
 [1;31mon line 54[0m
Tokenizing string: [1;31mCould not tokenize: [0m"dominic
 [1;31mon line 55[0m
Tokenizing identifier: farolino
Tokenizing string: [1;31mCould not tokenize: [0m"
 [1;31mon line 56[0m
Tokenizing reserved word: bool
Tokenizing reserved word: true
Tokenizing reserved word: :=
Tokenizing reserved word: false
Tokenizing reserved word: ;
Tokenizing identifier: a
Tokenizing reserved word: [
Tokenizing TInteger: 1
Tokenizing reserved word: ]
Tokenizing reserved word: :=
Tokenizing identifier: a
Tokenizing reserved word: [
Tokenizing TInteger: 1
Tokenizing reserved word: ]
Tokenizing reserved word: +
Tokenizing TInteger: 1
Tokenizing reserved word: ;
Tokenizing identifier: a
Tokenizing reserved word: [
Tokenizing TInteger: 1
Tokenizing reserved word: ]
Tokenizing reserved word: :=
Tokenizing identifier: a
Tokenizing reserved word: [
Tokenizing TInteger: 1
Tokenizing reserved word: ]
Tokenizing reserved word: +
Tokenizing TInteger: 1
Tokenizing reserved word: ;
Lexing complete...
