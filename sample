program dominic is
  integer i;
  integer my_integer;
  float my_float;
  bool my_bool;
  string my_string;
  char my_char;

  integer result_integer;
  float result_float;
  string result_string;

  integer integer_array[0: 9];
  float float_array[0: 9];
  string my_string_array[0: 9];
  integer skewed_array[-41: -40];

  procedure func(integer array[0: 9] in, integer size in)
    integer i;
  begin
    putString("INSIDE THE FUNCTION. Displaying everything in the array now");
    putString("The array is of size");
    putInteger(size);
    for (i := 0; i < size)
      putInteger(array[i]);
      i := i + 1;
    end for;
    putString("LEAVING THE FUNCTION.");
  end procedure;

  procedure factorial(integer n in, integer n_out in)
  begin
    if (n <= 0) then
      putString("factorial of n is");
      putInteger(n_out);
    else
      factorial(n - 1, n_out * n);
    end if;
  end procedure;

  procedure get_fifteen(float num out)
  begin
    num := 15.2444;
  end procedure;

  procedure zero_my_array(integer array[0: 9] out)
    integer i;
  begin
    for (i := 0; i < 10)
      array[i] := 0;
      i := i + 1;
    end for;
  end procedure;

  procedure square_my_array(integer array[0: 9] out)
  begin
    array := array * array;
  end procedure;

begin

  my_integer := 1111;
  my_float := 12.122;
  my_bool := true;
  my_string := "my string value woo";
  my_char := 'D';

  result_integer := my_integer;
  result_float := my_float;
  result_string := my_string;

  putInteger(11);
  putInteger(-result_integer);
  putFloat(-13.122);
  putFloat(result_float);
  putBool(my_bool);
  putString(my_string);
  putString(result_string);
  putChar(my_char);
  putChar('d');

  putString("Tested the putX methods now will try the getX");

  putString("Enter an integer");
  getInteger(my_integer);
  putString("You inputed:");
  putInteger(my_integer);

  putString("Enter a float");
  getFloat(my_float);
  putString("You inputed:");
  putFloat(my_float);

  putString("Enter a bool 1 or 0");
  getBool(my_bool);
  putString("You inputed:");
  putBool(my_bool);

  putString("Enter a char");
  getChar(my_char);
  putString("You inputed:");
  putChar(my_char);

  putString("Now trying if statements");

  if (my_bool) then
    putString("if was true");
  else
    putString("if was false");
  end if;

  if (false) then
    putString("if was true");
  else
    putString("if was false");
  end if;

  if (0) then
    putString("if was true");
  else
    putString("if was false");
  end if;

  if (1) then
    putString("if was true, the only option");
  end if;

  putString("Now trying for loops");

  for (i := 1; i < 10)
    putString("Loop iteration was executed");
    putInteger(i);
    i := i + 1;
  end for;

  i := 0;
  putString("Now testing out array indexing");
  integer_array[i] := my_integer;
  integer_array[1] := -22;
  integer_array[1] := -10_000;
  putInteger(integer_array[0]);
  putInteger(integer_array[1]);

  putString("Now trying out some array acrobatics");

  for (i := 0; i <= 9)
    integer_array[i] := i + 1;
    float_array[i] := i + 1.0;
    i := i + 1;
  end for;

  float_array := float_array + float_array;
  float_array := integer_array * float_array;

  for (i := 0; i < 10)
    putFloat(float_array[i]);
    i := i + 1;
  end for;

  //putString("Now for some function stuff");
  //putString("Printing integer array contents for control value");

  //for (i := 0; i < 10)
    //putInteger(integer_array[i]);
    //i := i + 1;
  //end for;

  //func(integer_array, 10);
  //func(integer_array * 10, 10);

  putString("Now for some function stuff");
  putString("Printing integer array contents for control value");

  for (i := 0; i < 10)
    putInteger(integer_array[i]);
    i := i + 1;
  end for;

  func(integer_array, integer_array[9]);
  func(integer_array * 10, 10);

  factorial(5, 1);

  putString("Now going to test parameters by reference: out parameters that is");

  putString("float_array :4: is expected to be a fifteen float:");
  get_fifteen(float_array[4]);
  putFloat(float_array[4]);

  putString("integer_array is expected to be zeroed out");
  zero_my_array(integer_array);
  for (i := 0; i < 10)
    putInteger(integer_array[i]);
    i := i + 1;
  end for;

  putString("Now let us assign all elements to ascending values, and test square_my_array");
  for (i := 0; i < 10)
    integer_array[i] := i + 1;
    i := i + 1;
  end for;

  square_my_array(integer_array);
  for (i := 0; i < 10)
    putInteger(integer_array[i]);
    i := i + 1;
  end for;

  putString("Now trying bitwise operations");
  integer_array := integer_array & 0;

  for (i := 0; i < 10)
    putInteger(integer_array[i]);
    i := i + 1;
  end for;

  integer_array := integer_array + 4;
  integer_array := 2 | integer_array;

  for (i := 0; i < 10)
    putInteger(integer_array[i]);
    i := i + 1;
  end for;

  if (false | true) then
    putString("ended up being true");
  else
    putString("ended up being false");
  end if;

  if (false & true) then
    putString("ended up being true");
  else
    putString("ended up being false");
  end if;

  my_integer := -(10);
  putInteger(my_integer);

  putString("Now testing skewed arrays");
  skewed_array[-41] := 1;
  skewed_array[-40] := 2;

  putInteger(skewed_array[-41]);
  putInteger(skewed_array[-40]);

end program.
